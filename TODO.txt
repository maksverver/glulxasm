code generation optimizations:
 - call _arg functions for call/tailcall functions when possible
   (see FIXME in glulx-to-c.py)
 - consider turning functions into vararg functions, eliminating the data
   stack altogether?

 - BUG: tailcall doesn't destroy the calling stack frame!
        (it's more like a call+return without the memory optimization)

Makefile:
 - linker script doesn't seem to yield a valid executable on Windows 

garglk:
   - seems to be missing fonts?
     (Try examining church in Counterfeit Monkey for Greek text.)

general:
   - rethink calling conventions (to speed up direct calls)?
   - use valgrind to find memory leaks?

native:
   - undo code:
        make compression optional?
        limit total amount of memory used by undo stack (e.g. 4 times the
        maximum size of a snapshot?)
   - load storycode from DLL/.so
     (requires storing stack in position-independent format, or loading the
      storycode at a fixed address!)

   - 50% of time is spent in binary search, specifically accellerated
     function FUNC_2_CP__Tab().  I should try to either fast-path this function
     or cache some of its results!

   - maybe: support for native accellerated functions?
            (this might not be necessary; need to check generated code,
             and test performance impact of making function table non-const)
   - maybe: support for filter subsystem?
   - maybe: when saving, save (part of?) the undo stack in an extra chunk

glulx-to-llvm:
    - write this! could be interesting.

glulx-to-c:
   + works OK

glulxd:
    + works OK

opcode-map:
    + now complete (though not all opcodes are implemented in a meaningful way)
