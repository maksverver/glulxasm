# The table below is used by glulx-to-c.py to generated C code.

# mnemonic          parameters sizes    code

add                 lls       LLL       s1 = l1 + l2;
sub                 lls       LLL       s1 = l1 - l2;
mul                 lls       LLL       s1 = l1 * l2;
div                 lls       lll       s1 = l1 / l2;
mod                 lls       lll       s1 = l1 % l2;
neg                 ls        LL        s1 = -l1;
bitand              lls       LLL       s1 = l1 & l2;
bitor               lls       LLL       s1 = l1 | l2;
bitxor              lls       LLL       s1 = l1 ^ l2;
bitnot              ls        LL        s1 = ~l1;
shiftl              lls       LLL       s1 = (l2 < 32) ? (l1 << l2) : 0;
ushiftr             lls       LLL       s1 = (l2 < 32) ? (l1 >> l2) : 0;
sshiftr             lls       lLl       s1 = (l2 < 32) ? (l1 >> l2) : (l1 < 0 ? -1 : 0);

jump                b         x         b1;
jz                  lb        Lx        if (l1 == 0) b1;
jnz                 lb        Lx        if (l1 != 0) b1;
jne                 llb       LLx       if (l1 != l2) b1;
jeq                 llb       LLx       if (l1 == l2) b1;
jlt                 llb       llx       if (l1 <  l2) b1;
jle                 llb       llx       if (l1 <= l2) b1;
jgt                 llb       llx       if (l1 >  l2) b1;
jge                 llb       llx       if (l1 >= l2) b1;
jltu                llb       LLx       if (l1 <  l2) b1;
jleu                llb       LLx       if (l1 <= l2) b1;
jgtu                llb       LLx       if (l1 >  l2) b1;
jgeu                llb       LLx       if (l1 >= l2) b1;

jumpabs             l         L         -

copy                ls        LL        s1 = l1;
copys               ls        SS        s1 = l1;
copyb               ls        BB        s1 = l1;
sexs                ls        ll        s1 = (int16_t)l1;
sexb                ls        ll        s1 = (int8_t)l1;

astore              lll       LLL       set_long(l1 + 4*l2, l3);
aload               lls       LLL       s1 = get_long(l1 + 4*l2);
astores             lll       LLL       set_shrt(l1 + 2*l2, l3);
aloads              lls       LLL       s1 = get_shrt(l1 + 2*l2);
astoreb             lll       LLL       set_byte(l1 + l2, l3);
aloadb              lls       LLL       s1 = get_byte(l1 + l2);
astorebit           lll       LlL       uint32_t b=l2&7, a=l1+((int)(l2-b))/8; set_byte(a, (get_byte(a)&~(1<<b))|((l3!=0)<<(b)));
aloadbit            lls       LlL       uint32_t b=l2&7, a=l1+((int)(l2-b))/8; s1 = (get_byte(a)>>(b))&1;

stkcount            s         L         s1 = sp - bp;
stkpeek             ls        LL        s1 = sp[-l1 - 1];
stkswap             -         -         uint32_t tmp = sp[-1]; sp[-1] = sp[-2]; sp[-2] = tmp;
stkcopy             l         l         int32_t n; for (n = 0; n < l1; ++n) sp[n] = sp[n - l1]; sp += l1;
stkroll             ll        Ll        native_stkroll(l1, l2, sp);

call                lls       LLL       *sp = l2; s1 = func(l1)(sp); sp -= l2;
callf               ls        LL        *sp = 0; s1 = func(l1)(sp);
callfi              lls       LLL       *sp++ = l2; *sp = 1; s1 = func(l1)(sp); sp -= 1;
callfii             llls      LLLL      *sp++ = l3; *sp++ = l2; *sp = 2; s1 = func(l1)(sp); sp -= 2;
callfiii            lllls     LLLLL     *sp++ = l4; *sp++ = l3; *sp++ = l2; *sp = 3; s1 = func(l1)(sp); sp -= 3;

ret                 l         L         return l1;
tailcall            ll        LL        *sp = l2; return func(l1)(sp);

catch               sl        LL        -
throw               ll        LL        -

getmemsize          s         L         s1 = native_getmemsize();
setmemsize          ls        LL        s1 = native_setmemsize(l1);

malloc              ls        LL        s1 = native_malloc(l1);
mfree               l         L         native_mfree(l1);

quit                -         -         native_quit();
restart             -         -         native_restart();
save                ls        LL        s1 = native_save(l1);
restore             ls        LL        s1 = native_restore(l1);
saveundo            s         L         s1 = native_saveundo();
restoreundo         s         L         s1 = native_restoreundo();
protect             ll        LL        native_protect(l1, l2);
verify              s         L         s1 = native_verify();

getiosys            ss        LL        native_getiosys(&s1, &s2);
setiosys            ll        LL        native_setiosys(l1, l2);

streamchar          l         L         native_streamchar(l1);
streamunichar       l         l         native_streamunichar(l1);
streamnum           l         l         native_streamnum(l1);
streamstr           l         L         native_streamstr(l1);
getstringtbl        s         L         s1 = native_getstringtbl();
setstringtbl        l         L         native_setstringtbl(l1);

random              ls        ll        s1 = native_random(l1);
setrandom           l         L         native_setrandom(l1);

mzero               ll        LL        memset(&mem[l2], 0, l1);
mcopy               lll       LLL       memmove(&mem[l3], &mem[l2], l1);

linearsearch        llllllls  LLLLLLLL  s1 = native_linearsearch(l1, l2, l3, l4, l5, l6, l7);
binarysearch        llllllls  LLLLLLLL  s1 = native_binarysearch(l1, l2, l3, l4, l5, l6, l7);
linkedsearch        lllllls   LLLLLLL   s1 = native_linkedsearch(l1, l2, l3, l4, l5, l6);

accelfunc           ll        LL        native_accelfunc(l1,l2);
accelparam          ll        LL        native_accelparam(l1,l2);

nop                 -         -         ;
gestalt             lls       LLL       s1 = native_gestalt(l1, l2);
debugtrap           l         L         native_debugtrap(l1, &sp);
glk                 lls       LLL       s1 = native_glk(l1, l2, &sp);
